// Code generated by protoc-gen-go.
// source: taskcore.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	taskcore.proto

It has these top-level messages:
	Message
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type Message struct {
	Id   uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto1.CompactTextString(m) }
func (*Message) ProtoMessage()    {}

func init() {
}

// Client API for Communication service

type CommunicationClient interface {
	Process(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type communicationClient struct {
	cc *grpc.ClientConn
}

func NewCommunicationClient(cc *grpc.ClientConn) CommunicationClient {
	return &communicationClient{cc}
}

func (c *communicationClient) Process(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/proto.communication/Process", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Communication service

type CommunicationServer interface {
	Process(context.Context, *Message) (*Message, error)
}

func RegisterCommunicationServer(s *grpc.Server, srv CommunicationServer) {
	s.RegisterService(&_Communication_serviceDesc, srv)
}

func _Communication_Process_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Message)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(CommunicationServer).Process(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Communication_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.communication",
	HandlerType: (*CommunicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _Communication_Process_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
