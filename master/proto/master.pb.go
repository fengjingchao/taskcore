// Code generated by protoc-gen-go.
// source: master.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	master.proto

It has these top-level messages:
	RecordRequest
	RecordReply
	RetrieveRequest
	RetrieveReply
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type RecordRequest struct {
	Id    uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	State []byte `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *RecordRequest) Reset()         { *m = RecordRequest{} }
func (m *RecordRequest) String() string { return proto1.CompactTextString(m) }
func (*RecordRequest) ProtoMessage()    {}

type RecordReply struct {
}

func (m *RecordReply) Reset()         { *m = RecordReply{} }
func (m *RecordReply) String() string { return proto1.CompactTextString(m) }
func (*RecordReply) ProtoMessage()    {}

type RetrieveRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *RetrieveRequest) Reset()         { *m = RetrieveRequest{} }
func (m *RetrieveRequest) String() string { return proto1.CompactTextString(m) }
func (*RetrieveRequest) ProtoMessage()    {}

type RetrieveReply struct {
	State []byte `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *RetrieveReply) Reset()         { *m = RetrieveReply{} }
func (m *RetrieveReply) String() string { return proto1.CompactTextString(m) }
func (*RetrieveReply) ProtoMessage()    {}

func init() {
}

// Client API for StateServer service

type StateServerClient interface {
	RecordRPC(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*RecordReply, error)
	RetrieveRPC(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*RetrieveReply, error)
}

type stateServerClient struct {
	cc *grpc.ClientConn
}

func NewStateServerClient(cc *grpc.ClientConn) StateServerClient {
	return &stateServerClient{cc}
}

func (c *stateServerClient) RecordRPC(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*RecordReply, error) {
	out := new(RecordReply)
	err := grpc.Invoke(ctx, "/proto.state_server/RecordRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateServerClient) RetrieveRPC(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*RetrieveReply, error) {
	out := new(RetrieveReply)
	err := grpc.Invoke(ctx, "/proto.state_server/RetrieveRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StateServer service

type StateServerServer interface {
	RecordRPC(context.Context, *RecordRequest) (*RecordReply, error)
	RetrieveRPC(context.Context, *RetrieveRequest) (*RetrieveReply, error)
}

func RegisterStateServerServer(s *grpc.Server, srv StateServerServer) {
	s.RegisterService(&_StateServer_serviceDesc, srv)
}

func _StateServer_RecordRPC_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RecordRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(StateServerServer).RecordRPC(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _StateServer_RetrieveRPC_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RetrieveRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(StateServerServer).RetrieveRPC(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _StateServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.state_server",
	HandlerType: (*StateServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordRPC",
			Handler:    _StateServer_RecordRPC_Handler,
		},
		{
			MethodName: "RetrieveRPC",
			Handler:    _StateServer_RetrieveRPC_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
